@charset "UTF-8";
/*
 * Signify that something is an Object, and that it may 
 * be used in any number of unrelated contexts to the one 
 * you can currently see it in. Making modifications to 
 * these types of class could potentially have knock-on 
 * effects in a lot of other unrelated places. 
 * Tread carefully.
 */
/**
 * Signify that something is a Component. This 
 * is a concrete, implementation-specific piece 
 * of UI. All of the changes you make to its 
 * styles should be detectable in the context
 * you’re currently looking at. Modifying 
 * these styles should be safe and have 
 * no side effects.
 */
/**
 * Signify that this class is a Utility class. 
 * It has a very specific role (often providing 
 * only one declaration) and should not be bound 
 * onto or changed. It can be reused and is not 
 * tied to any specific piece of UI. You will 
 * probably recognise this namespace from 
 * libraries and methodologies like SUIT.
 */
/**
 * Signify that a class is responsible for adding a 
 * Theme to a view. It lets us know that UI Components’ 
 * current cosmetic appearance may be due 
 * to the presence of a theme.
 */
/**
 * Signify that a class is responsible for adding a 
 * Theme to a view. It lets us know that UI Components’ 
 * current cosmetic appearance may be due 
 * to the presence of a theme.
 */
/**
 * Signify that the piece of UI in question 
 * is currently styled a certain way because 
 * of a state or condition. This stateful 
 * namespace is gorgeous, and comes from SMACSS. 
 * It tells us that the DOM currently has a 
 * temporary, optional, or short-lived style 
 * applied to it due to a certain state being invoked.
 *
 * -----
 *
 * Signify that this piece of the DOM has some 
 * behaviour acting upon it, and that JavaScript 
 * binds onto it to provide that behaviour. 
 * If you’re not a developer working with 
 * JavaScript, leave these well alone.
 */
/**
 * Signify that this class is the worst of 
 * the worst—a hack! Sometimes, although 
 * incredibly rarely, we need to add a 
 * class in our markup in order to force 
 * something to work. If we do this, we 
 * need to let others know that this class 
 * is less than ideal, and hopefully temporary 
 * (i.e. do not bind onto this).
 */
/**
 * Signify that a QA or Test Engineering team 
 * is running an automated UI test which needs 
 * to find or bind onto these parts of the DOM. 
 * Like the JavaScript namespace, this basically 
 * just reserves hooks in the 
 * DOM for non-CSS purposes.
 */

/*# sourceMappingURL=data:application/json;base64, */
