@charset "UTF-8";
/**
 * Return config value
 */
/**
 * Set config options
 */
/**
 * Format: .block[<element>|<modifier>] {}
 */
/**
 * Signify that something is an Object, and that it may 
 * be used in any number of unrelated contexts to the one 
 * you can currently see it in. Making modifications to 
 * these types of class could potentially have knock-on 
 * effects in a lot of other unrelated places. 
 * Tread carefully.
 *
 * Format: .o-object[<element>|<modifier>] {}
 */
/**
 * Signify that something is a Component. This 
 * is a concrete, implementation-specific piece 
 * of UI. All of the changes you make to its 
 * styles should be detectable in the context
 * you’re currently looking at. Modifying 
 * these styles should be safe and have 
 * no side effects.
 *
 * Format: .c-component[<element>|<modifier>] {}
 */
/**
 * Signify that this class is a Utility class. 
 * It has a very specific role (often providing 
 * only one declaration) and should not be bound 
 * onto or changed. It can be reused and is not 
 * tied to any specific piece of UI. You will 
 * probably recognise this namespace from 
 * libraries and methodologies like SUIT.
 *
 * Format: .u-utility {}
 */
/**
 * Signify that a class is responsible for adding a 
 * Theme to a view. It lets us know that UI Components’ 
 * current cosmetic appearance may be due 
 * to the presence of a theme.
 *
 * Format: .t-theme {}
 */
/**
 * Signify that a class is responsible for adding a 
 * Theme to a view. It lets us know that UI Components’ 
 * current cosmetic appearance may be due 
 * to the presence of a theme.
 *
 * Format: .s-scope {}
 */
/**
 * Signify that the piece of UI in question 
 * is currently styled a certain way because 
 * of a state or condition. This stateful 
 * namespace is gorgeous, and comes from SMACSS. 
 * It tells us that the DOM currently has a 
 * temporary, optional, or short-lived style 
 * applied to it due to a certain state being invoked.
 *
 * -----
 *
 * Signify that this piece of the DOM has some 
 * behaviour acting upon it, and that JavaScript 
 * binds onto it to provide that behaviour. 
 * If you’re not a developer working with 
 * JavaScript, leave these well alone.
 *
 * Format: .[is|has|js]-state {}
 */
/**
 * Signify that this class is the worst of 
 * the worst—a hack! Sometimes, although 
 * incredibly rarely, we need to add a 
 * class in our markup in order to force 
 * something to work. If we do this, we 
 * need to let others know that this class 
 * is less than ideal, and hopefully temporary 
 * (i.e. do not bind onto this).
 *
 * Format: ._<namespace>hack {}
 */
/**
 * Signify that a QA or Test Engineering team 
 * is running an automated UI test which needs 
 * to find or bind onto these parts of the DOM. 
 * Like the JavaScript namespace, this basically 
 * just reserves hooks in the 
 * DOM for non-CSS purposes.
 *
 * Format: .qa-node {}
 */
/**
 * In this method we’ll use before and after pseudo
 * classes fix the issue. Following is the code.
 */
/**
 * This mixin by Jason Zimdars is a breeze to use and
 * offers a greater visual experience to those that
 * are lucky enough to have a retina device.
 */
/**
 * Always a handy mixin. Set every border radius or just a
 * single side without worrying about all those prefixes.
 */
/**
 * An easy way to truncate text with an ellipsis.
 * Requires the element to be block or inline-block.
 */
/**
 * Pass in the desired location of your target element
 * to produce all the necessary positioning code.
 */
/**
 * This mixin sets the property in rem's with a px fallback.
 */
/**
 * Hiding Text and Image Replacement
 */
.o-object {
  outline: 5px solid #9bcb3c;
  display: object; }

.c-component {
  outline: 5px solid #00b8a9;
  display: component; }

.s-scope {
  outline: 5px solid #a2453d;
  display: scope; }

.t-theme {
  outline: 5px solid #60316e;
  display: theme; }

.u-utility {
  outline: 5px solid #635270;
  display: utility; }

._hack {
  outline: 5px solid #f33535;
  display: hack; }

.qa-test {
  outline: 5px solid #f8e796;
  display: test; }

.block {
  outline: 5px solid #363863;
  display: block; }
  .block__element1 {
    outline: 5px solid #635270;
    display: element1; }
    .block__element1--modifier1 {
      outline: 5px solid #C98B70;
      display: modifier1; }
    .block__element1.is-state {
      outline: 5px solid #66a96b;
      display: is-state; }
    .block__element1.has-state {
      outline: 5px solid #66a96b;
      display: has-state; }
    .block__element1.js-state {
      outline: 5px solid #66a96b;
      display: js-state; }
  .block--modifier2 {
    outline: 5px solid #C98B70;
    display: modifier2; }
    .block--modifier2.block--modifier1 {
      display: modifier2-1; }
  .block__element2 {
    outline: 5px solid #635270;
    display: element2; }
    .block__element2 + .block__element2 {
      display: element2-2; }
    .block__element2 + .block__element1 {
      display: element2-1; }
    .block--modifier2 .block__element2 {
      display: modifier2; }

.test {
  font-size: 16px;
  font-size: 2rem; }

/*# sourceMappingURL=data:application/json;base64, */
